name: Requirements Approval Workflow

on:
  issue_comment:
    types: [created, edited]
  issues:
    types: [labeled, unlabeled]

permissions:
  issues: write
  contents: read
  pull-requests: write

jobs:
  check-approval:
    if: contains(github.event.issue.labels.*.name, 'requirement') && contains(github.event.issue.labels.*.name, 'pending-review')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Check stakeholder approvals
        id: check-approvals
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.issue.number;
            const issueBody = context.payload.issue.body;
            
            // Extract stakeholders from issue body - try multiple patterns with better line ending support
            let stakeholderMatch = issueBody.match(/## 👥 Stakeholders\r?\n(.*?)(?=\r?\n##|$)/s);
            if (!stakeholderMatch) {
              // Try alternative patterns with both \n and \r\n support
              stakeholderMatch = issueBody.match(/## Stakeholders\r?\n(.*?)(?=\r?\n##|$)/s) || 
                                issueBody.match(/##\s*👥\s*Stakeholders\s*\r?\n(.*?)(?=\r?\n##|$)/s) ||
                                issueBody.match(/Stakeholders:?\s*\r?\n(.*?)(?=\r?\n##|$)/s);
            }
            
            if (!stakeholderMatch) {
              console.log('No stakeholders section found in issue');
              // Set outputs even when no stakeholders found
              core.setOutput('approved', 'false');
              core.setOutput('approval-count', '0');
              core.setOutput('total-stakeholders', '0');
              core.setOutput('approved-by', '');
              core.setOutput('stakeholders', '');
              return { approved: false, reason: 'No stakeholders defined' };
            }
            
            const stakeholderContent = stakeholderMatch[1].trim();
            
            // Check if the stakeholders section is actually empty (just whitespace)
            if (!stakeholderContent || stakeholderContent.length === 0) {
              console.log('Empty stakeholders section found');
              // Set outputs even when no stakeholders found
              core.setOutput('approved', 'false');
              core.setOutput('approval-count', '0');
              core.setOutput('total-stakeholders', '0');
              core.setOutput('approved-by', '');
              core.setOutput('stakeholders', '');
              return { approved: false, reason: 'Empty stakeholders section' };
            }
            
            const stakeholders = stakeholderContent
              .split(/\r?\n/)  // Handle both \n and \r\n line endings
              .map(line => line.trim())
              .filter(line => line.length > 0) // Remove empty lines first
              .filter(line => line.startsWith('@') || line.includes('@'))
              .map(line => {
                // Handle both @username and plain username formats - include hyphens, underscores, numbers
                const match = line.match(/@([\w-]+)/);
                return match ? match[1] : line.replace('@', '').trim();
              })
              .filter(name => name.length > 0); // Remove empty strings
            
            console.log('🔍 ENHANCED DEBUG LOGGING:');
            console.log('Issue body length:', issueBody.length);
            console.log('Issue body (first 300 chars):', JSON.stringify(issueBody.substring(0, 300)));
            console.log('Issue body (last 200 chars):', JSON.stringify(issueBody.substring(Math.max(0, issueBody.length - 200))));
            console.log('Raw stakeholder match:', JSON.stringify(stakeholderMatch[1]));
            console.log('Raw match length:', stakeholderMatch[1].length);
            console.log('Split lines:', stakeholderMatch[1].split(/\r?\n/).map(line => `"${line}"`));
            console.log('Stakeholder content after trim:', JSON.stringify(stakeholderContent));
            console.log('After filtering:', stakeholderMatch[1].split(/\r?\n/).map(line => line.trim()).filter(line => line.startsWith('@') || line.includes('@')));
            console.log('Final stakeholders:', stakeholders);
            
            if (stakeholders.length === 0) {
              console.log('No valid stakeholders found after parsing');
              // Set outputs even when no valid stakeholders found
              core.setOutput('approved', 'false');
              core.setOutput('approval-count', '0');
              core.setOutput('total-stakeholders', '0');
              core.setOutput('approved-by', '');
              core.setOutput('stakeholders', '');
              return { approved: false, reason: 'No valid stakeholders found' };
            }
            
            // Get all comments on the issue
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            
            // Check for approval patterns in comments
            const approvalPatterns = [
              /approved?/i,           // Simple "approved" or "approve" (case insensitive)
              /✅.*approved?/i,       // "✅ Approved" 
              /approved?.*✅/i,       // "Approved ✅"
              /lgtm/i,               // "LGTM" or "lgtm"
              /looks good to me/i,   // "Looks good to me"
              /👍.*approve/i,        // "👍 approve"
              /approve.*👍/i,        // "approve 👍"
              /yes/i,                // Simple "yes"
              /ok/i,                 // Simple "ok" or "OK"
              /good to go/i          // "Good to go"
            ];
            
            const approvedBy = new Set();
            
            // Check comments for approvals
            for (const comment of comments.data) {
              const commentBody = comment.body.toLowerCase();
              const author = comment.user.login;
              
              // Check if author is a stakeholder
              if (stakeholders.includes(author)) {
                // Check for approval patterns
                const hasApproval = approvalPatterns.some(pattern => pattern.test(commentBody));
                if (hasApproval) {
                  approvedBy.add(author);
                  console.log(`Approval found from ${author}: ${comment.body.substring(0, 100)}...`);
                }
              }
            }
            
            // Check reactions on the issue (👍 reactions as approvals)
            const reactions = await github.rest.reactions.listForIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            
            for (const reaction of reactions.data) {
              if (reaction.content === '+1' && stakeholders.includes(reaction.user.login)) {
                approvedBy.add(reaction.user.login);
                console.log(`Thumbs up approval from ${reaction.user.login}`);
              }
            }
            
            const allApproved = stakeholders.every(stakeholder => approvedBy.has(stakeholder));
            const approvalCount = approvedBy.size;
            const totalStakeholders = stakeholders.length;
            
            console.log(`Approvals: ${approvalCount}/${totalStakeholders}`);
            console.log('Approved by:', Array.from(approvedBy));
            console.log('All approved:', allApproved);
            
            // Set outputs for next steps
            core.setOutput('approved', allApproved.toString());
            core.setOutput('approval-count', approvalCount);
            core.setOutput('total-stakeholders', totalStakeholders);
            core.setOutput('approved-by', Array.from(approvedBy).join(', '));
            core.setOutput('stakeholders', stakeholders.join(', '));
            
            return {
              approved: allApproved,
              approvalCount,
              totalStakeholders,
              approvedBy: Array.from(approvedBy),
              stakeholders
            };
      
      - name: Update issue status to approved
        if: steps.check-approvals.outputs.approved == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.issue.number;
            
            // Remove 'pending-review' label and add 'approved' label
            await github.rest.issues.removeLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              name: 'pending-review'
            });
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              labels: ['approved', 'ready-for-development']
            });
            
            // Add approval confirmation comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `## ✅ Requirements Approved!
            
            **All stakeholder approvals received:**
            ${{ steps.check-approvals.outputs.approved-by }}
            
            **Status:** APPROVED → Ready for Development
            
            The requirements have been automatically moved to the "Approved" status and are ready for implementation.
            
            ---
            🤖 *Automated by S-cubed Requirements Workflow*`
            });
            
            console.log('Issue approved and labels updated');
      
      - name: Update approval progress
        if: steps.check-approvals.outputs.approved == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.issue.number;
            const approvalCount = parseInt('${{ steps.check-approvals.outputs.approval-count }}') || 0;
            const totalStakeholders = parseInt('${{ steps.check-approvals.outputs.total-stakeholders }}') || 0;
            const approvedBy = '${{ steps.check-approvals.outputs.approved-by }}';
            const stakeholders = '${{ steps.check-approvals.outputs.stakeholders }}';
            
            // Handle case where no stakeholders are defined
            if (totalStakeholders === 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `## ⚠️ No Stakeholders Defined
            
            **Issue:** This requirement issue does not have any stakeholders defined for approval.
            
            **Action needed:** Please add a "## 👥 Stakeholders" section to the issue description with the GitHub usernames of people who need to approve this requirement.
            
            **Example format:**
            \`\`\`
            ## 👥 Stakeholders
            @username1
            @username2
            \`\`\`
            
            ---
            🤖 *Automated by S-cubed Requirements Workflow*`
              });
            } else if (approvalCount > 0) {
              // Only add progress comment if there are some approvals and stakeholders exist
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `## 🔄 Approval Progress Update
            
            **Current Status:** ${approvalCount}/${totalStakeholders} stakeholders approved
            
            ✅ **Approved by:** ${approvedBy || 'None yet'}
            
            ⏳ **Still needed from:** ${stakeholders.split(', ').filter(s => !approvedBy.includes(s)).join(', ')}
            
            ---
            🤖 *Automated by S-cubed Requirements Workflow*`
              });
            }
            
            console.log(`Approval progress: ${approvalCount}/${totalStakeholders}`);

  notify-stakeholders:
    if: github.event.action == 'labeled' && contains(github.event.label.name, 'pending-review')
    runs-on: ubuntu-latest
    
    steps:
      - name: Notify stakeholders of new requirements
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.issue.number;
            const issueTitle = context.payload.issue.title;
            const issueBody = context.payload.issue.body;
            
            // Extract stakeholders from issue body with improved line ending support
            const stakeholderMatch = issueBody.match(/## 👥 Stakeholders\r?\n(.*?)(?=\r?\n##|$)/s);
            if (!stakeholderMatch) {
              console.log('No stakeholders found for notification');
              return;
            }
            
            const stakeholders = stakeholderMatch[1]
              .split(/\r?\n/)  // Handle both \n and \r\n line endings
              .map(line => line.trim())
              .filter(line => line.startsWith('@'))
              .map(line => line.substring(1))
              .join(' @');
            
            if (stakeholders) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `## 📢 Stakeholder Review Requested
            
            @${stakeholders}
            
            Your review and approval is requested for these requirements: **${issueTitle}**
            
            ### 🔍 Please Review:
            1. Are the business objectives complete and accurate?
            2. Are there any missing functional requirements?
            3. Do the acceptance criteria cover all scenarios?
            4. Any security, performance, or compliance considerations?
            
            ### ✅ How to Approve:
            - Add a comment with "Approved", "LGTM", "Yes", or "OK"
            - Use 👍 reaction on this issue
            - Optional: Use "✅ Approved" for visual clarity
            - Provide specific feedback if changes are needed
            
            **Deadline for feedback:** ${new Date(Date.now() + 5 * 24 * 60 * 60 * 1000).toLocaleDateString()}
            
            ---
            🤖 *Automated by S-cubed Requirements Workflow*`
              });
            }