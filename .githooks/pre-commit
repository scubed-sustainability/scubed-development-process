#!/bin/bash

# üõ°Ô∏è S-cubed Pre-commit Hook - Prevent TypeScript Errors
# Catches missing methods, type errors, and compilation issues before commit

echo "üîç Pre-commit validation starting..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to check if we're in the right directory
check_directory() {
    if [ ! -f "vscode-extension/package.json" ]; then
        echo -e "${RED}‚ùå Error: Not in S-cubed repository root${NC}"
        echo "Please run from repository root directory"
        exit 1
    fi
}

# Function to run TypeScript compilation
check_typescript() {
    echo -e "${BLUE}üîç Checking TypeScript compilation...${NC}"
    
    cd vscode-extension
    
    # Run TypeScript compilation
    if npm run compile > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ TypeScript compilation passed${NC}"
        cd ..
        return 0
    else
        echo -e "${RED}‚ùå TypeScript compilation failed${NC}"
        echo -e "${YELLOW}Full error output:${NC}"
        npm run compile
        cd ..
        return 1
    fi
}

# Function to check for common method call issues
check_method_calls() {
    echo -e "${BLUE}üîç Checking for potential missing method calls...${NC}"
    
    # Look for common patterns that might indicate missing methods
    suspicious_patterns=(
        "\.initialize\(\)"
        "\.destroy\(\)" 
        "\.cleanup\(\)"
        "\.dispose\(\)"
    )
    
    issues_found=0
    
    for pattern in "${suspicious_patterns[@]}"; do
        matches=$(grep -r "$pattern" vscode-extension/src/ 2>/dev/null || true)
        if [ ! -z "$matches" ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  Found potential method calls for pattern: $pattern${NC}"
            echo "$matches" | head -3
            issues_found=1
        fi
    done
    
    if [ $issues_found -eq 0 ]; then
        echo -e "${GREEN}‚úÖ No suspicious method call patterns found${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Review the above method calls manually${NC}"
    fi
    
    return 0  # Don't fail commit for warnings
}

# Function to check for uncommitted TypeScript files
check_staged_ts_files() {
    echo -e "${BLUE}üîç Checking staged TypeScript files...${NC}"
    
    # Get list of staged TypeScript files
    staged_ts_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|tsx)$' || true)
    
    if [ ! -z "$staged_ts_files" ]; then
        echo -e "${GREEN}‚úÖ Found staged TypeScript files:${NC}"
        echo "$staged_ts_files" | sed 's/^/  - /'
        return 0
    else
        echo -e "${BLUE}‚ÑπÔ∏è  No TypeScript files staged for commit${NC}"
        return 0
    fi
}

# Main execution
main() {
    check_directory
    check_staged_ts_files
    
    # Only run TypeScript checks if we have TypeScript files staged
    staged_ts_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|tsx)$' || true)
    
    if [ ! -z "$staged_ts_files" ]; then
        if ! check_typescript; then
            echo -e "${RED}‚ùå Pre-commit hook failed: TypeScript compilation errors${NC}"
            echo -e "${YELLOW}Fix the TypeScript errors above before committing${NC}"
            exit 1
        fi
        
        check_method_calls
    fi
    
    echo -e "${GREEN}‚úÖ Pre-commit validation passed${NC}"
    exit 0
}

# Run main function
main "$@"